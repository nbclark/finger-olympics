//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace MobileSrc.FantasticFingerFun.ScoreCenter {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScoreCenter.ScoreServiceSoap")]
    public interface ScoreServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/RegisterScore", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginRegisterScore(MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreRequest request, System.AsyncCallback callback, object asyncState);
        
        MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreResponse EndRegisterScore(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetScores", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetScores(string gameName, string gameVariation, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, System.AsyncCallback callback, object asyncState);
        
        ScoreItem[] EndGetScores(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetScoresWithCurrent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetScoresWithCurrent(string gameName, string gameVariation, long lastScore, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, System.AsyncCallback callback, object asyncState);
        
        ScoreItem[] EndGetScoresWithCurrent(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum SortDirection {
        
        /// <remarks/>
        Ascending,
        
        /// <remarks/>
        Descending,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ScoreItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int indexField;
        
        private string userField;
        
        private float scoreField;
        
        private bool isLastField;
        
        private System.DateTime dateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
                this.RaisePropertyChanged("Index");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
                this.RaisePropertyChanged("User");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public float Score {
            get {
                return this.scoreField;
            }
            set {
                this.scoreField = value;
                this.RaisePropertyChanged("Score");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool IsLast {
            get {
                return this.isLastField;
            }
            set {
                this.isLastField = value;
                this.RaisePropertyChanged("IsLast");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterScore", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterScoreRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string anonymousId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string user;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string gameName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string gameVariation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public float latitude;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public float longitude;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public float score;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] securityCode;
        
        public RegisterScoreRequest() {
        }
        
        public RegisterScoreRequest(string anonymousId, string user, string gameName, string gameVariation, float latitude, float longitude, float score, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, byte[] securityCode) {
            this.anonymousId = anonymousId;
            this.user = user;
            this.gameName = gameName;
            this.gameVariation = gameVariation;
            this.latitude = latitude;
            this.longitude = longitude;
            this.score = score;
            this.direction = direction;
            this.securityCode = securityCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterScoreResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterScoreResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public ScoreItem[] RegisterScoreResult;
        
        public RegisterScoreResponse() {
        }
        
        public RegisterScoreResponse(ScoreItem[] RegisterScoreResult) {
            this.RegisterScoreResult = RegisterScoreResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ScoreServiceSoapChannel : MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterScoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterScoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ScoreItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ScoreItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScoresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScoresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ScoreItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ScoreItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScoresWithCurrentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScoresWithCurrentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ScoreItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ScoreItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScoreServiceSoapClient : System.ServiceModel.ClientBase<MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap>, MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap {
        
        private BeginOperationDelegate onBeginRegisterScoreDelegate;
        
        private EndOperationDelegate onEndRegisterScoreDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterScoreCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScoresDelegate;
        
        private EndOperationDelegate onEndGetScoresDelegate;
        
        private System.Threading.SendOrPostCallback onGetScoresCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScoresWithCurrentDelegate;
        
        private EndOperationDelegate onEndGetScoresWithCurrentDelegate;
        
        private System.Threading.SendOrPostCallback onGetScoresWithCurrentCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ScoreServiceSoapClient() {
        }
        
        public ScoreServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScoreServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RegisterScoreCompletedEventArgs> RegisterScoreCompleted;
        
        public event System.EventHandler<GetScoresCompletedEventArgs> GetScoresCompleted;
        
        public event System.EventHandler<GetScoresWithCurrentCompletedEventArgs> GetScoresWithCurrentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap.BeginRegisterScore(MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterScore(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginRegisterScore(string anonymousId, string user, string gameName, string gameVariation, float latitude, float longitude, float score, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, byte[] securityCode, System.AsyncCallback callback, object asyncState) {
            MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreRequest inValue = new MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreRequest();
            inValue.anonymousId = anonymousId;
            inValue.user = user;
            inValue.gameName = gameName;
            inValue.gameVariation = gameVariation;
            inValue.latitude = latitude;
            inValue.longitude = longitude;
            inValue.score = score;
            inValue.direction = direction;
            inValue.securityCode = securityCode;
            return ((MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap)(this)).BeginRegisterScore(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreResponse MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap.EndRegisterScore(System.IAsyncResult result) {
            return base.Channel.EndRegisterScore(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private ScoreItem[] EndRegisterScore(System.IAsyncResult result) {
            MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreResponse retVal = ((MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap)(this)).EndRegisterScore(result);
            return retVal.RegisterScoreResult;
        }
        
        private System.IAsyncResult OnBeginRegisterScore(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string anonymousId = ((string)(inValues[0]));
            string user = ((string)(inValues[1]));
            string gameName = ((string)(inValues[2]));
            string gameVariation = ((string)(inValues[3]));
            float latitude = ((float)(inValues[4]));
            float longitude = ((float)(inValues[5]));
            float score = ((float)(inValues[6]));
            MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction = ((MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection)(inValues[7]));
            byte[] securityCode = ((byte[])(inValues[8]));
            return this.BeginRegisterScore(anonymousId, user, gameName, gameVariation, latitude, longitude, score, direction, securityCode, callback, asyncState);
        }
        
        private object[] OnEndRegisterScore(System.IAsyncResult result) {
            ScoreItem[] retVal = this.EndRegisterScore(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterScoreCompleted(object state) {
            if ((this.RegisterScoreCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterScoreCompleted(this, new RegisterScoreCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterScoreAsync(string anonymousId, string user, string gameName, string gameVariation, float latitude, float longitude, float score, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, byte[] securityCode) {
            this.RegisterScoreAsync(anonymousId, user, gameName, gameVariation, latitude, longitude, score, direction, securityCode, null);
        }
        
        public void RegisterScoreAsync(string anonymousId, string user, string gameName, string gameVariation, float latitude, float longitude, float score, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, byte[] securityCode, object userState) {
            if ((this.onBeginRegisterScoreDelegate == null)) {
                this.onBeginRegisterScoreDelegate = new BeginOperationDelegate(this.OnBeginRegisterScore);
            }
            if ((this.onEndRegisterScoreDelegate == null)) {
                this.onEndRegisterScoreDelegate = new EndOperationDelegate(this.OnEndRegisterScore);
            }
            if ((this.onRegisterScoreCompletedDelegate == null)) {
                this.onRegisterScoreCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterScoreCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterScoreDelegate, new object[] {
                        anonymousId,
                        user,
                        gameName,
                        gameVariation,
                        latitude,
                        longitude,
                        score,
                        direction,
                        securityCode}, this.onEndRegisterScoreDelegate, this.onRegisterScoreCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap.BeginGetScores(string gameName, string gameVariation, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScores(gameName, gameVariation, direction, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ScoreItem[] MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap.EndGetScores(System.IAsyncResult result) {
            return base.Channel.EndGetScores(result);
        }
        
        private System.IAsyncResult OnBeginGetScores(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string gameName = ((string)(inValues[0]));
            string gameVariation = ((string)(inValues[1]));
            MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction = ((MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection)(inValues[2]));
            return ((MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap)(this)).BeginGetScores(gameName, gameVariation, direction, callback, asyncState);
        }
        
        private object[] OnEndGetScores(System.IAsyncResult result) {
            ScoreItem[] retVal = ((MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap)(this)).EndGetScores(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScoresCompleted(object state) {
            if ((this.GetScoresCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScoresCompleted(this, new GetScoresCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScoresAsync(string gameName, string gameVariation, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction) {
            this.GetScoresAsync(gameName, gameVariation, direction, null);
        }
        
        public void GetScoresAsync(string gameName, string gameVariation, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, object userState) {
            if ((this.onBeginGetScoresDelegate == null)) {
                this.onBeginGetScoresDelegate = new BeginOperationDelegate(this.OnBeginGetScores);
            }
            if ((this.onEndGetScoresDelegate == null)) {
                this.onEndGetScoresDelegate = new EndOperationDelegate(this.OnEndGetScores);
            }
            if ((this.onGetScoresCompletedDelegate == null)) {
                this.onGetScoresCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScoresCompleted);
            }
            base.InvokeAsync(this.onBeginGetScoresDelegate, new object[] {
                        gameName,
                        gameVariation,
                        direction}, this.onEndGetScoresDelegate, this.onGetScoresCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap.BeginGetScoresWithCurrent(string gameName, string gameVariation, long lastScore, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScoresWithCurrent(gameName, gameVariation, lastScore, direction, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ScoreItem[] MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap.EndGetScoresWithCurrent(System.IAsyncResult result) {
            return base.Channel.EndGetScoresWithCurrent(result);
        }
        
        private System.IAsyncResult OnBeginGetScoresWithCurrent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string gameName = ((string)(inValues[0]));
            string gameVariation = ((string)(inValues[1]));
            long lastScore = ((long)(inValues[2]));
            MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction = ((MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection)(inValues[3]));
            return ((MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap)(this)).BeginGetScoresWithCurrent(gameName, gameVariation, lastScore, direction, callback, asyncState);
        }
        
        private object[] OnEndGetScoresWithCurrent(System.IAsyncResult result) {
            ScoreItem[] retVal = ((MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap)(this)).EndGetScoresWithCurrent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScoresWithCurrentCompleted(object state) {
            if ((this.GetScoresWithCurrentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScoresWithCurrentCompleted(this, new GetScoresWithCurrentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScoresWithCurrentAsync(string gameName, string gameVariation, long lastScore, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction) {
            this.GetScoresWithCurrentAsync(gameName, gameVariation, lastScore, direction, null);
        }
        
        public void GetScoresWithCurrentAsync(string gameName, string gameVariation, long lastScore, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, object userState) {
            if ((this.onBeginGetScoresWithCurrentDelegate == null)) {
                this.onBeginGetScoresWithCurrentDelegate = new BeginOperationDelegate(this.OnBeginGetScoresWithCurrent);
            }
            if ((this.onEndGetScoresWithCurrentDelegate == null)) {
                this.onEndGetScoresWithCurrentDelegate = new EndOperationDelegate(this.OnEndGetScoresWithCurrent);
            }
            if ((this.onGetScoresWithCurrentCompletedDelegate == null)) {
                this.onGetScoresWithCurrentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScoresWithCurrentCompleted);
            }
            base.InvokeAsync(this.onBeginGetScoresWithCurrentDelegate, new object[] {
                        gameName,
                        gameVariation,
                        lastScore,
                        direction}, this.onEndGetScoresWithCurrentDelegate, this.onGetScoresWithCurrentCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap CreateChannel() {
            return new ScoreServiceSoapClientChannel(this);
        }
        
        private class ScoreServiceSoapClientChannel : ChannelBase<MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap>, MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap {
            
            public ScoreServiceSoapClientChannel(System.ServiceModel.ClientBase<MobileSrc.FantasticFingerFun.ScoreCenter.ScoreServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegisterScore(MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("RegisterScore", _args, callback, asyncState);
                return _result;
            }
            
            public MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreResponse EndRegisterScore(System.IAsyncResult result) {
                object[] _args = new object[0];
                MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreResponse _result = ((MobileSrc.FantasticFingerFun.ScoreCenter.RegisterScoreResponse)(base.EndInvoke("RegisterScore", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetScores(string gameName, string gameVariation, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = gameName;
                _args[1] = gameVariation;
                _args[2] = direction;
                System.IAsyncResult _result = base.BeginInvoke("GetScores", _args, callback, asyncState);
                return _result;
            }
            
            public ScoreItem[] EndGetScores(System.IAsyncResult result) {
                object[] _args = new object[0];
                ScoreItem[] _result = ((ScoreItem[])(base.EndInvoke("GetScores", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetScoresWithCurrent(string gameName, string gameVariation, long lastScore, MobileSrc.FantasticFingerFun.ScoreCenter.SortDirection direction, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = gameName;
                _args[1] = gameVariation;
                _args[2] = lastScore;
                _args[3] = direction;
                System.IAsyncResult _result = base.BeginInvoke("GetScoresWithCurrent", _args, callback, asyncState);
                return _result;
            }
            
            public ScoreItem[] EndGetScoresWithCurrent(System.IAsyncResult result) {
                object[] _args = new object[0];
                ScoreItem[] _result = ((ScoreItem[])(base.EndInvoke("GetScoresWithCurrent", _args, result)));
                return _result;
            }
        }
    }
}
